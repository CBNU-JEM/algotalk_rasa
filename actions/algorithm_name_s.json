{
  "algorithm": [
    {
      "name": "뫼비우스 반전 공식",
      "brief_explain": "g와 f가 수론적 함수이며 g(n)=∑ d∣n f(d) 이면 f(n)=∑ d∣n g(d)μ(n/d) 인 공식이야. 간단히 말하면 g(n)이 n의 모든 양의 약수 d에 대해 f(d)의 누적합으로 표현될 때, f(n)을 g(d)를 이용해서 구할 수 있는 공식이야.",
      "detail_explain": "g와 f가 수론적 함수이며 g(n)=∑ d∣n f(d) 이면 f(n)=∑ d∣n g(d)μ(n/d) 인 공식이야. 간단히 말하면 g(n)이 n의 모든 양의 약수 d에 대해 f(d)의 누적합으로 표현될 때, f(n)을 g(d)를 이용해서 구할 수 있는 공식이야.",
      "level": "고급",
      "parent": null
    },
    {
      "name": "덱을 이용한 다이나믹 프로그래밍",
      "brief_explain": "덱 자료구조를 이용해서 다이나믹 프로그래밍을 하는 방법이야.",
      "detail_explain": "먼저, 다이나믹 프로그래밍은 큰 문제를 작은 문제로 나누어 풀 때 반복되는 작은 문제들의 값을 저장해두었다가 재사용하는 방법을 말해. 이런 다이나믹 프로그래밍을 할 때 맨 처음과 맨 마지막에서 입출력을 할 수 있는 자료구조인 덱을 사용하는 방법이 덱을 이용한 다이나믹 프로그래밍이야.",
      "level": "중급",
      "parent": "다이나믹 프로그래밍"
    },
    {
      "name": "정규 표현식",
      "brief_explain": "특정한 규칙을 가진 문자열의 집합을 표현하는데 사용하는 형식 언어를 말해. 주로 문자열의 검색과 치환을 위한 용도로 사용돼.",
      "detail_explain": "정규 표현식은 일치하는 텍스트가 준수해야 하는 패턴을 표현하기 위해 특정한 표준의 텍스트 신택스를 의미하기 위해 사용돼. 일반적으로 텍스트 문자열에서 일치하는 패턴을 찾을 때 사용해.",
      "level": "초급",
      "parent": null
    },
    {
      "name": "링크/컷 트리",
      "brief_explain": "여러 개의 트리를 관리하는 자료구조로, 트리 두개를 연결하고(Link), 끊는(Cut) 연산을 가지고 있어.",
      "detail_explain": "여러 개의 트리를 관리하는 자료구조로, 이 자료구조의 특징은 find_root(노드가 속한 트리의 루트), link(한 트리의 루트를 다른 트리의 노드로 연결), cut(루트가 아닌 노드와 부모 사이의 연결 제거) 연산을 모두 O(logN)의 복잡도에 수행이 가능하다는 것이야. 또, 여러 트리 간 연결-잘라내기가 자유롭고, Splay Tree를 기반으로 한 자료구조로 다양한 쿼리를 효율적으로 처리할 수가 있다는 장점이 있어.",
      "level": "고급",
      "parent": "트리"
    },
    {
      "name": "매내처",
      "brief_explain": "회문(팰린드롬)에 대한 문제를 빠른 시간 안에 해결할 수 있는 알고리즘이야.",
      "detail_explain": "매내처 알고리즘을 적용하면 문자열의 모든 위치에 대해서 그 위치를 중심으로 하는 최대 회문(팰린드롬)의 한쪽 길이를 O(n)안에 구할 수 있어. 예를 들어 banana에 이 알고리즘을 적용하면 결과는 [0,0,1,2,1,0]이 나오지.",
      "level": "고급",
      "parent": null
    },
    {
      "name": "볼록 다각형 내부의 점 판정",
      "brief_explain": "볼록한 다각형 내부에 점이 있는지 없는지 검사하는 문제야.",
      "detail_explain": "다각형 내부에 점이 있는지 없는지 판정할 때 자주 쓰이는 방법은 The Crossing Number (cn) 교차한 횟수 방법이 있어. 이 방법은 점에서 출발한 반직선이 다각형 경계선을 몇번 교차해 가는지 세어서 짝수일 때는 외부, 홀수일 때는 내부에 존재함을 알아내.",
      "level": "고급",
      "parent": "기하학"
    },
    {
      "name": "오일러 피 함수",
      "brief_explain": "정수환의 몫환의 가역원을 세는 함수야. 즉, n이 양의 정수일 때, ϕ(n)은 n과 서로소인 1부터 n까지의 정수의 개수와 같아.",
      "detail_explain": "ϕ(n)은 n과 서로소인 1부터 n까지의 정수의 개수와 같아. 오일러 피 함수는 곱셈적 함수야. 즉, 두 정수 m,n이 서로소라면, ϕ(mn)=ϕ(m)ϕ(n) 이 성립해. 소인수분해를 한 뒤 오일러 파이 함수가 곱셈적 함수임을 이용해서 계산하면 쉽게 답을 구할 수 있어.",
      "level": "고급",
      "parent": null
    },
    {
      "name": "연결 리스트",
      "brief_explain": "각 노드가 데이터와 포인터를 가지고 한 줄로 연결되어 있는 방식으로 데이터를 저항하는 자료구조야.",
      "detail_explain": " 각 노드가 데이터와 포인터를 가지고 한 줄로 연결되어 있는 방식으로 데이터를 저장하는 자료 구조로, 데이터를 담고 있는 노드들이 연결되어 있는데, 노드의 포인터가 다음이나 이전의 노드와의 연결을 담당하고 있어. 연결 리스트의 종류로는 단일 연결 리스트, 이중 연결 리스트 등이 있어. 연결 리스트는 늘어선 노드의 중간지점에서도 자료의 추가와 삭제가 O(1)의 시간에 가능하다는 장점이 있지만, 배열이나 트리 구조와는 달리 특정 위치의 데이터를 검색할 때 O(n)의 시간이 걸리는 단점도 있어.",
      "level": "초급",
      "parent": null
    },
    {
      "name": "0-1 너비 우선 탐색",
      "brief_explain": "가중치가 0과 1만 있는 그래프에서 최단 거리를 구하는 방법이야.",
      "detail_explain": "큐를 이용한 너비 우선 탐색와 비슷하지만, 0-1 너비 우선 탐색은 덱을 사용하여 가중치가 0이면 덱의 앞에 넣어 빨리 처리해 버리고, 1이면 일반 너비 우선 탐색과 같이 덱의 뒤에 넣어.",
      "level": "중급",
      "parent": "그래프 탐색"
    },
    {
      "name": "수치해석",
      "brief_explain": "자연과학, 공학, 의학, 그리고 사회과학 등에 나타나는 문제들 중, 수학적인 문제로 표현될 수 있는 문제들을 궁극적으로 컴퓨터를 이용하여 해결하고자 하는 수학의 실질적인 응용분야야.",
      "detail_explain": "수치해석에서 문제를 해결하는 과정은 수학적 모형화(해결하고자 하는 문제를 역학, 생물학, 경제학 등의 기본 가설이나 법칙들을 사용하여 상 및 편미분방정식, 대수방정식 등의 수학적인 문제로 변형하는 단계) -> 수학적 분석(수학적 모형화 과정을 거쳐 생성된 수학적 문제를 미분방정식, 함수해석학, 기하학 및 대수학 등 가능한 수학의 이론들을 적용하여 해의 유일성, 존재성 및 정칙성 등을 분석하는 단계) -> 수치적 분석(좁은 의미의 수치해석이라고도 할 수 있는데, 앞의 수학적 분석에서 다루어진 문제의 해가 존재하면, 이 해를 어떻게 컴퓨터를 이용하여 구할 것인가에 대한 수치적 알고리즘을 개발하고, 이 알고리즘을 적용하여 구한 해의 수렴성 판정 및 오차분석 등을 하는 단계) -> 수치 실험(실제로 가장 효율적인 수치 알고리즘에 따라 프로그램을 작성하여 원래 문제를 해결하는 단계) 4단계로 나눌 수 있어.",
      "level": "고급",
      "parent": null
    },
    {
      "name": "외판원 순회 문제",
      "brief_explain": "도시들이 있고 특정 도시에서 도시로 이동할 때 드는 비용이 주어졌을 때, 불특정한 도시에서 출발해서 모든 도시를 돌고 다시 출발 도시로 돌아왔을 때 드는 최소 비용을 구하는 문제가 외판원 순회 문제야.",
      "detail_explain": "어떤 외판원이 n개의 도시를 방문할 계획을 수립하고 있다고 가정해 보자. 각 도시는 다른 모든 도시와 도로로 연결되어 있어. 이때 출장 비용을 최소로 줄이기 위해서 외판원이 거주하고 있는 도시에서 각 도시를 한 번씩만 방문하고 다시 출발한 도시로 돌아오는 가장 최소 비용의 일주여행 경로를 찾는것이 외판원 순회 문제야.",
      "level": "중급",
      "parent": "다이나믹 프로그래밍"
    },
    {
      "name": "인터프리터",
      "brief_explain": "코드를 한 줄씩 읽어 내려가며 실행하는 프로그램을 말해.",
      "detail_explain": "급 언어로 작성된 프로그램 전체를 목적 프로그램으로 번역하는 컴파일러와 달리, 인터프리터는 고급 언어로 작성된 프로그램을 한 줄 단위로 받아들여 번역하고, 번역과 동시에 프로그램을 한 줄 단위로 즉시 실행시키는 프로그램이야. 컴파일러와 비교해 실행속도는 느리지만 번역속도는 빠르다는 장점이 있어.",
      "level": "초급",
      "parent": null
    },
    {
      "name": "폴라드 로",
      "brief_explain": "존 폴라드가 1975년에 고안한 소인수분해 알고리즘이야. 저장 공간을 적게 사용하고 소인수분해하는 데 걸리는 실행 시간은 소인수분해하려는 합성수의 가장 작은 소인수의 제곱근에 비례하는 특징이 있어.",
      "detail_explain": null,
      "level": "고급",
      "parent": null
    },
    {
      "name": "Alien 트릭",
      "brief_explain": "IOI 2016 이후에 알려지기 시작했는데 아직까지도 많이 알려지지는 않은 알고리즘이라서 나도 아직 공부중이야.",
      "detail_explain": null,
      "level": "고급",
      "parent": null
    },
    {
      "name": "함수 개형을 이용한 최적화",
      "brief_explain": "DP 식을 그래프 형태로 나타냈을 때의 개형을 바탕으로 하는 최적화야.",
      "detail_explain": "입력의 크기가 굉장히 커지는 경우에도, 주어진 DP 점화식이 가지는 그래프 개형을 이용한 독특한 최적화를 통해 문제를 O(NlogN)에 해결할 수 있다는 특징이 있다.",
      "level": "고급",
      "parent": null
    },
    {
      "name": "모듈로 곱셈 역원",
      "brief_explain": "Ax ≡ 1 mod N 인 식을 만족하는 x를 A의 N에 대한 모듈로 역원이라고 해. 일반적으로 A^-1라고 표기해.",
      "detail_explain": "(A * A^-1) ≡ 1 (mod N) 또는 (A * A^-1) mod N = 1 에서 A^-1가 모듈로 곱셈 역원이야. 이 수를 구하는 방법은 먼저 0에서 N-1까지의 A^-1값에 대해 A * A^-1 mod C 를 계산하고, A * A^-1 mod N = 1을 만족하는 A^-1값을 찾으면 돼.",
      "level": "중급",
      "parent": "수학"
    },
    {
      "name": "다각형의 넓이",
      "brief_explain": "다각형의 꼭짓점이 순서대로 주어졌을 때, 외적공식을 이용하여 다각형의 꼭짓점만으로 다각형의 면적을 구하는 문제야.",
      "detail_explain": null,
      "level": "고급",
      "parent": null
    },
    {
      "name": "기댓값의 선형성",
      "brief_explain": "기댓값은 선형성이라는 성질을 갖고 있다는 특징으로 문제를 푸는 방법이야.",
      "detail_explain": "함수 f에 대해 임의의 수 x,y에 대해 f(x+y) = f(x) + f(y) 가 항상 성립하고, 임의의 수 x와 a에 대해 f(ax)=af(x) 가 항상 성립할 때 함수 f는 선형이라고 할 수 있어. 기댓값도 E[aX+bY] = aE[X]+bE[y] 이므로 선형이야.",
      "level": "고급",
      "parent": null
    },
    {
      "name": "오프라인 동적 연결성 판정",
      "brief_explain": "아직 잘 모르겠어..",
      "detail_explain": null,
      "level": "고급",
      "parent": null
    },
    {
      "name": "선형 계획법",
      "brief_explain": "최적화 문제의 일종으로 주어진 선형 조건들을 만족시키면서 선형인 목적 함수를 최적화하는 문제야.",
      "detail_explain": "한정된 자원을 효율적으로 할당하여 목적함수를 최대화하거나 최소화하는 문제를 다룰때 사용해. 선형 계획법으로 문제를 푸는 방법은 주어진 선형 조건을 부등식으로 나타내고, 제약조건을 그래프로 표현한 다음, 가능한 영역에서 최적의 해를 찾으면 돼.",
      "level": "중급",
      "parent": null
    },
    {
      "name": "번사이드 보조정리",
      "brief_explain": "원순열 등의 경우의 수를 구하는 문제에서 자주 나오는 정리야.",
      "detail_explain": null,
      "level": "고급",
      "parent": null
    },
    {
      "name": "오목 다각형 내부의 점 판정",
      "brief_explain": "오목한 다각형 내부에 점이 있는지 없는지 검사하는 문제야.",
      "detail_explain": "다각형 내부에 점이 있는지 없는지 판정할 때 자주 쓰이는 방법은 The Crossing Number (cn) 교차한 횟수 방법이 있어. 이 방법은 점에서 출발한 반직선이 다각형 경계선을 몇번 교차해 가는지 세어서 짝수일 때는 외부, 홀수일 때는 내부에 존재함을 알아내.",
      "level": "고급",
      "parent": "기하학"
    },
    {
      "name": "피타고라스 정리",
      "brief_explain": "직각 삼각형의 빗변의 제곱이 두 직각변의 제곱의 합과 같다는 정리야.",
      "detail_explain": "직각 삼각형의 빗변의 제곱이 두 직각변의 제곱의 합과 같다는 정리야. c가 빗변인 abc 직각삼각형에서 a^2 + b^2 = c^2 이야.",
      "level": "초급",
      "parent": "수학"
    },
    {
      "name": "키타마사",
      "brief_explain": "아직 잘 모르겠어..",
      "detail_explain": null,
      "level": "고급",
      "parent": null
    },
    {
      "name": "트리 동형 사상",
      "brief_explain": "인접성이 같을 때(노드 사이의 같은 매핑 구조를 가질 때) 두 그래프는 동형 사상을 가진다고 해. 즉, 두 트리의 간선의 방향만 조절해 완전히 동일한 트리가 되면 두 트리는 동형이야.",
      "detail_explain": null,
      "level": "고급",
      "parent": "트리"
    },
    {
      "name": "홀의 결혼 정리",
      "brief_explain": "어떤 경우에 남녀 사이에 짝을 지어 주는 게 가능한가에 대한 정리야. 홀의 결혼 정리 조건을 만족하면 모든 남녀가 결혼할 수 있어.",
      "detail_explain": "어떤 그래프 G = (L∪R,E) 가 주어졌다고 하자. 어떤 부분집합 S⊆L 에 대해서, S에 인접한 정점들의 집합을 N(S)⊆R 라고 할 때, L의 모든 정점이 참여하는 matching이 존재하는 필요충분조건은 모든 L의 부분집합 S가 |S|≤|N(S)|를 만족하는 것이 바로 홀의 결혼 정리야.",
      "level": "중급",
      "parent": "그래프 탐색"
    },
    {
      "name": "헝가리안",
      "brief_explain": "가중치가 있는 이분 그래프에서 최대 가중치를 가진 간선을 찾기 위한 알고리즘이야.",
      "detail_explain": "다른 알고리즘으로 O(V^4)에 걸리는 일을 O(V^3)에. 처리할 수 있어.",
      "level": "고급",
      "parent": "그래프 탐색"
    },
    {
      "name": "이산 로그",
      "brief_explain": "a^x=b 를 만족하는 x를 가리켜.",
      "detail_explain": null,
      "level": "고급",
      "parent": null
    },
    {
      "name": "최소 외접원",
      "brief_explain": "모든 점을 포함하는 가장 작은 원을 찾는 문제야.",
      "detail_explain": "",
      "level": "중급",
      "parent": "기하학"
    }
  ]
}
